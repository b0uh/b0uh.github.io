<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Thomas Loiret - Random thoughts - security, javascript</title><link href="https://b0uh.github.io/" rel="alternate"></link><link href="https://b0uh.github.io/feeds/security-javascript.atom.xml" rel="self"></link><id>https://b0uh.github.io/</id><updated>2019-11-27T12:00:00-04:00</updated><entry><title>ReDos + Node.js</title><link href="https://b0uh.github.io/redos-nodejs.html" rel="alternate"></link><published>2019-11-27T12:00:00-04:00</published><updated>2019-11-27T12:00:00-04:00</updated><author><name>Thomas Loiret</name></author><id>tag:b0uh.github.io,2019-11-27:/redos-nodejs.html</id><summary type="html">&lt;p&gt;When developing with NodeJS, you should be aware of regular expression denial of service (ReDoS).&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When developing with NodeJS, you should be aware of regular expression denial of service (ReDoS).&lt;/p&gt;
&lt;h1&gt;ReDos + Node.js&lt;/h1&gt;
&lt;p&gt;A ReDoS (Regular expression Denial of Service) is a type of attack used to put down a web server. This is possible when the code run by the server contains a regular expression that triggers too many backtracking.&lt;/p&gt;
&lt;p&gt;Let's step back quickly to understand what it really means when developing with Node.js. It is important to understand how the event loop works. It &lt;a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/"&gt;"allows Node.js to perform non-blocking I/O operations — despite the fact that JavaScript is single-threaded — by offloading operations to the system kernel whenever possible"&lt;/a&gt;. Therefore we should avoid to &lt;a href="https://nodejs.org/en/docs/guides/dont-block-the-event-loop/"&gt;block the event loop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When the event loop is blocked Node.js cannot process anything else and the server is paralyzed. When the code contains unsafe regular expressions it can become an attack vector. Instead of having to send a lot of requests to put down a server with a classic DoS, you can send only a few requests that will trigger the unsafe regular expression and put down the server.&lt;/p&gt;
&lt;h1&gt;Examples&lt;/h1&gt;
&lt;p&gt;Try to execute the following regular expression with the suggested input. You will notice that Node.js take a long time (several seconds) to respond.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sr"&gt;/^(A+)*B/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;E&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sr"&gt;/(\w+\d+)+C/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sr"&gt;/\s*\n/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;What can I do about it?&lt;/h1&gt;
&lt;p&gt;There are some tools out there like &lt;a href="https://github.com/substack/safe-regex"&gt;&lt;code&gt;safe-regex&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://www.cs.bham.ac.uk/~hxt/research/rxxr2/"&gt;&lt;code&gt;rxxr2&lt;/code&gt;&lt;/a&gt; to try to detect unsafe regular expressions. Unfortunately none of them work 100% of the time.&lt;/p&gt;
&lt;p&gt;Since this security issue is directly linked to how Node.js interprets regular expression, the safest solution is to use a different engine: &lt;a href="https://github.com/google/re2/"&gt;&lt;code&gt;re2&lt;/code&gt;&lt;/a&gt;. However, switching engine also means that some of your regular expressions may &lt;a href="https://www.npmjs.com/package/re2#limitations-things-re2-does-not-support"&gt;not work anymore&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In conclusion, you can continue to use Node.js regular expression engine as long as you as aware of ReDoS and avoid catastrophic backtracking. If you are not sure about your code, don't hesitate to use &lt;code&gt;re2&lt;/code&gt;, this is the simplest solution to be safe :)&lt;/p&gt;</content><category term="regex"></category><category term="dos"></category><category term="redos"></category><category term="javascript"></category><category term="catastrophic"></category><category term="exponential-time"></category><category term="regular expressions"></category></entry></feed>